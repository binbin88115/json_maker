// THIS FILE IS GENERATED BY TOOL, PLEASE DON'T EDIT

#ifndef _JSON_LOADER_H_
#define _JSON_LOADER_H_

#include <map>
#include <vector>
#include <functional>

#include "json.h"
#include "cocos2d.h"

template <typename T>
class JSONLoader
{0}
	friend class JSONManager;
public:
	JSONLoader();
	~JSONLoader();

	const T* queryById(int id) const;
	std::vector<const T*> query(std::function<bool(const T*)> selector);

protected:
	void load(const Json::Value& table);

protected:
	std::map<int, T*> m_mData;
{1};

template <typename T>
JSONLoader<T>::JSONLoader()
{0}
{1}

template <typename T>
JSONLoader<T>::~JSONLoader()
{0}
	auto iter = m_mData.begin();
	for (; iter != m_mData.end(); ++iter) {0}
		CC_SAFE_DELETE(iter->second);
	{1}
	m_mData.clear();
{1}

template <typename T>
const T* JSONLoader<T>::queryById(int id) const
{0}
	auto iter = m_mData.find(id);
	if (iter != m_mData.end()) {0}
		return iter->second;
	{1}
	return nullptr;
{1}

template <typename T>
std::vector<const T*> JSONLoader<T>::query(std::function<bool(const T*)> selector)
{0}
	std::vector<const T*> ret;
	auto iter = m_mData.begin();
	for (; iter != m_mData.end(); ++iter) {0}
		if (selector(iter->second)) {0}
			ret.push_back(iter->second);
		{1}
	{1}
	return std::move(ret);
{1}

template <typename T>
void JSONLoader<T>::load(const Json::Value& table)
{0}
	for (unsigned int i = 0; i < table.size(); ++i) {0}
        T* item = new T(table[i]);
        m_mData[item->id] = item;
    {1}
{1}

#endif // _JSON_LOADER_H_
